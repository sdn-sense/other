# WARNING. USE IT AT YOUR OWN RISK!
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: iri
data:
  haproxy.cfg: |
    global
        lua-load /etc/haproxy/random-redirect.lua
        log stdout format raw local0 debug
        crt-base /etc/grid-security/certificates

        maxconn     4000
        user        haproxy
        group       haproxy
        #daemon

        stats socket /var/lib/haproxy/stats

    defaults
        mode                    http
        log                     global
        option                  httplog
        option                  dontlognull
        option http-server-close
        option forwardfor       except 127.0.0.0/8
        option                  redispatch
        retries                 3
        timeout http-request    10s
        timeout queue           1m
        timeout connect         10s
        timeout client          1m
        timeout server          1m
        timeout http-keep-alive 10s
        timeout check           10s
        maxconn                 3000

    listen stats
        bind :::1024 ssl  crt /etc/ssl/private/cert.pem ssl-min-ver TLSv1.2
        mode http
        stats enable
        stats hide-version
        stats uri /haproxy_stats
        stats realm HAProxy\ Statistics

    frontend range1
        bind 2001:48d0:3001:11a::800:2880 ssl crt /etc/ssl/private/cert.pem
        mode http
        option httplog

        http-request set-var(req.backend_name) str(backendrange1)
        http-request lua.random_redirect

        # Set prefix if token is found
        http-request set-var(req.redirect_prefix) str(?authz=) if { var(req.auth_token) -m found } !{ query -m found }
        http-request set-var(req.redirect_prefix) str(&authz=) if { var(req.auth_token) -m found } { query -m found }

        http-request redirect location https://%[var(req.target_host)]%[path]%[query]%[var(req.redirect_prefix)]%[var(req.auth_token)] code 307 if { var(req.target_host) -m found }


    backend backendrange1
        mode http
        option tcp-check
        server red-xfer7-mv0.unl.edu:1094 red-xfer7-mv0.unl.edu:1094 check ssl verify none
        server red-xfer8-mv0.unl.edu:1094 red-xfer8-mv0.unl.edu:1094 check ssl verify none


    frontend range2
        bind 2001:48d0:3001:11a::800:2881 ssl crt /etc/ssl/private/cert.pem
        mode http
        option httplog

        http-request set-var(req.backend_name) str(backendrange2)
        http-request lua.random_redirect

        # Set prefix if token is found
        http-request set-var(req.redirect_prefix) str(?authz=) if { var(req.auth_token) -m found } !{ query -m found }
        http-request set-var(req.redirect_prefix) str(&authz=) if { var(req.auth_token) -m found } { query -m found }

        http-request redirect location https://%[var(req.target_host)]%[path]%[query]%[var(req.redirect_prefix)]%[var(req.auth_token)] code 307 if { var(req.target_host) -m found }

    backend backendrange2
        mode http
        option tcp-check
        server red-xfer7-mv1.unl.edu:1094 red-xfer7-mv1.unl.edu:1094 check ssl verify none
        server red-xfer8-mv1.unl.edu:1094 red-xfer8-mv1.unl.edu:1094 check ssl verify none


    frontend range3
        bind 2001:48d0:3001:11a::800:2882 ssl crt /etc/ssl/private/cert.pem
        mode http
        option httplog

        http-request set-var(req.backend_name) str(backendrange3)
        http-request lua.random_redirect

        # Set prefix if token is found
        http-request set-var(req.redirect_prefix) str(?authz=) if { var(req.auth_token) -m found } !{ query -m found }
        http-request set-var(req.redirect_prefix) str(&authz=) if { var(req.auth_token) -m found } { query -m found }

        http-request redirect location https://%[var(req.target_host)]%[path]%[query]%[var(req.redirect_prefix)]%[var(req.auth_token)] code 307 if { var(req.target_host) -m found }

    backend backendrange3
        mode http
        option tcp-check
        server red-xfer7-mv2.unl.edu:1094 red-xfer7-mv2.unl.edu:1094 check ssl verify none
        server red-xfer8-mv2.unl.edu:1094 red-xfer8-mv2.unl.edu:1094 check ssl verify none

    frontend range4
        bind 2001:48d0:3001:11a::800:2883 ssl crt /etc/ssl/private/cert.pem
        mode http
        option httplog

        http-request set-var(req.backend_name) str(backendrange4)
        http-request lua.random_redirect

        # Set prefix if token is found
        http-request set-var(req.redirect_prefix) str(?authz=) if { var(req.auth_token) -m found } !{ query -m found }
        http-request set-var(req.redirect_prefix) str(&authz=) if { var(req.auth_token) -m found } { query -m found }

        http-request redirect location https://%[var(req.target_host)]%[path]%[query]%[var(req.redirect_prefix)]%[var(req.auth_token)] code 307 if { var(req.target_host) -m found }

    backend backendrange4
        mode http
        option tcp-check
        server cmssense3-origin-2841-1.fnal.gov:2880 cmssense3-origin-2841-1.fnal.gov:2880 check ssl verify none
        server cmssense2-origin-2841-1.fnal.gov:2880 cmssense2-origin-2841-1.fnal.gov:2880 check ssl verify none



  random-redirect.lua: |
    core.register_action("random_redirect", { "http-req" }, function(txn)
        local be_name = txn:get_var("req.backend_name")
        local backend = core.backends[be_name]

        if not backend then
            txn:Info("Backend " .. be_name .. " not found!")
            return
        end

        local alive = {}

        for name, srv in pairs(backend.servers) do
            local stats = srv:get_stats()
            local addr = srv.get_name and srv:get_name() or nil
            txn:Debug(string.format("Lua sees server: %s, status: %s", tostring(addr), tostring(stats.status)))
            if stats.status == "UP" then
                table.insert(alive, addr)
            end
        end

        if #alive > 0 then
            local pick = alive[math.random(#alive)]
            txn:set_var("req.target_host", pick)
            txn:Debug("Redirecting to " .. pick)

            -- Parse Authorization header
            local auth_header = txn.http:req_get_headers()["authorization"]
            if auth_header and auth_header[0] then
                local auth_value = auth_header[0]
                -- Extract Bearer token
                local token = auth_value:match("^Bearer%s+(.+)$")
                if token then
                    -- Encode token
                    local encoded_token = string.gsub(token, "([^%w%-%.%_%~])", function(c)
                        return string.format("%%%02X", string.byte(c))
                    end)
                    txn:set_var("req.auth_token", encoded_token)
                end
            end
        else
            txn:Info("No backend servers are UP for backend " .. be_name)
        end
    end)
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: haproxy-ipv6
  namespace: iri
spec:
  replicas: 1
  serviceName: haproxy-ipv6
  selector:
    matchLabels:
      app: haproxy-ipv6
  template:
    metadata:
      labels:
        app: haproxy-ipv6
      annotations:
        k8s.v1.cni.cncf.io/networks: '[{"gateway":["2001:48d0:3001:11a::1"],"ips":["2001:48d0:3001:11a::800/64"], "mac": "1a:36:6f:35:5d:90", "name":"multus11a"}]'
    spec:
      initContainers:
        - name: combine-cert-key
          image: busybox
          command: ["/bin/sh", "-c"]
          args:
            - ls -l /certs/ && cat /certs/hostcert.pem /certs/hostcert.key.pem > /combined-cert/cert.pem;
          volumeMounts:
            - name: certs-800
              mountPath: /certs
            - name: combined-cert
              mountPath: /combined-cert
      tolerations:
      - effect: NoSchedule
        key: nautilus.io/reservation
        operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - k8s-gen5-01.sdsc.optiputer.net
                  - k8s-gen5-02.sdsc.optiputer.net
      containers:
        - name: haproxy
          image: haproxy:2.9
          args: ["-f", "/usr/local/etc/haproxy/haproxy.cfg"]
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "4"
              memory: "4Gi"
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy/
            - name: combined-cert
              mountPath: /etc/ssl/private
            - name: lua-scripts
              mountPath: /etc/haproxy/random-redirect.lua
              subPath: random-redirect.lua
          ports:
            - containerPort: 1024
              protocol: TCP
      volumes:
        - name: haproxy-config
          configMap:
            name: haproxy-config
        - name: certs-800
          secret:
            secretName: certs-800
            defaultMode: 420
            items:
              - key: hostcert.pem
                path: hostcert.pem
              - key: hostcert.key.pem
                path: hostcert.key.pem
        - name: combined-cert
          emptyDir: {}
        - name: lua-scripts
          configMap:
            name: haproxy-config

